# Use TERM=tmux-256color
set -g default-terminal "tmux-256color"
set -g focus-events on

# Detect root session
set -g @tmux-running-as-root 0
if-shell 'test `id -u` -eq 0' { set -g @tmux-running-as-root 1 }

# Detect SSH session
set -g @tmux-running-under-ssh 0
if-shell -F '#{!=:#{n:#{SSH_CONNECTION}},0}' { set -g @tmux-running-under-ssh 1 }

# Pane border and pane title
set -g pane-border-lines single
set -g pane-border-format '#[reverse] #{pane_index}#{?pane_marked,*,} │ #{pane_title} #[noreverse]'
set -g pane-border-style 'none,fg=brightblack'
set-hook -g @update-pane-border-status {
  setw -F pane-border-status '#{?#{==:#{window_panes},1},off,top}'
}
set-hook -ga after-split-window 'set-hook -R @update-pane-border-status'
set-hook -ga pane-focus-in 'set-hook -R @update-pane-border-status'

# Windows and panes start from 0
set -g base-index 0
setw -g pane-base-index 0

bind C-c new-session # Ctrl + c -- create new session
setw -g automatic-rename off # Disable automatic window renaming
set -g renumber-windows on # Enable automatic window numbering

# STATUS BAR
set -g status on
set -g status-position bottom

# Normal user uses cyan colors, root uses red colors
set -g @status-workdir-style 'bold,fg=brightwhite,bg=color23'
set -g @status-command-style 'bold,fg=brightwhite,bg=darkcyan'
set -g pane-active-border-style 'fg=green'
if-shell -F '#{@tmux-running-as-root}' {
  set -g @status-workdir-style 'bold,fg=brightwhite,bg=color52'
  set -g @status-command-style 'bold,fg=brightwhite,bg=darkred'
  set -g pane-active-border-style 'fg=red'
}
set -g @status-sessions-style '#{@status-workdir-style}'
set -g status-style '#{@status-command-style}'
set -g @status-left '#[none,fg=black,bg=yellow] #{USER}@#h #[#{E:@status-sessions-style}]'
set -ga @status-left '#[reverse] #{client_session}/#{window_index}/#{pane_index} #[noreverse]'
set -g @status-main '#[#{@status-workdir-style}] '
set -ga @status-main '#{?@myzshrc-current-directory,#{E:@myzshrc-current-directory},#{s|^#{HOME}\b|~|:pane_current_path}} '
set -ga @status-main '#[#{@status-command-style}] #{pane_title}'
set -g @status-right ' #[default]#[align=right]'
set -ga @status-right '#{?#{!=:#{n:pane_mode},0},#{pane_mode} ,}'
set -ga @status-right '#{?client_prefix,#[none]#[fg=black]#[bg=yellow] ^B #[default],}'
set -ga @status-right '#{?client_readonly, readonly ,}'
set -ga @status-right '#{?pane_marked, marked ,}'
set -ga @status-right '#[#{E:@status-sessions-style}]#[push-default]'
set -ga @status-right '#{S:#{?#{==:#S,#{client_session}},#[reverse],} #S '
set -ga @status-right '#{?#{==:#{session_windows},1},,'
set -ga @status-right '#{W:#{?#{&&:#{window_active},#{==:#S,#{client_session}}},#[underscore],#[nounderscore]}#{window_index}#[nounderscore]} }'
set -ga @status-right '#[noreverse]}#[pop-default]'
set -ga @status-right '#[none,fg=black,bg=color252] %a %Y-%m-%d %H#[blink]:#[noblink]%M '
set -g status-format[0] '#{E:@status-left}#[default]#{E:@status-main}#{E:@status-right}'
set -g status-interval 10

# Window title
set -g set-titles on
set -g set-titles-string ''
if-shell -F '#{@tmux-running-under-ssh}' { set -ga set-titles-string '🌎' }
if-shell -F '#{@tmux-running-as-root}' { set -ga set-titles-string '🔓' }
if-shell -F '#{@tmux-running-under-ssh}' { set -ga set-titles-string ' [#h]' }
if-shell -F '#{||:@tmux-running-under-ssh,@tmux-running-as-root}' { set -ga set-titles-string ' ' }
set -ga set-titles-string '#{?@myzshrc-current-directory,#{E:@myzshrc-current-directory},#{s|^#{HOME}\b|~|:pane_current_path}} • #{pane_title}'

# Select session by number
bind-key -r -T prefix 0 switch-client -t 0
bind-key -r -T prefix 1 switch-client -t 1
bind-key -r -T prefix 2 switch-client -t 2
bind-key -r -T prefix 3 switch-client -t 3
bind-key -r -T prefix 4 switch-client -t 4
bind-key -r -T prefix 5 switch-client -t 5
bind-key -r -T prefix 6 switch-client -t 6
bind-key -r -T prefix 7 switch-client -t 7
bind-key -r -T prefix 8 switch-client -t 8
bind-key -r -T prefix 9 switch-client -t 9
bind -r C-h previous-window           # select previous window
bind -r C-l next-window               # select next window

# Ctrl + Alt + ->  -- navigate through sessions / windows
bind -n C-M-left {
  if-shell -F '#{window_start_flag}' {
    # If the current window is the first window in the session, switch to the previous session
    if-shell -F "#{!=:#{S:x},x}" {
      # Only switch if there is more than one session
      switch-client -p
    }
    # Select the last window in the previous session
    run-shell -b -C "select-window -t '{end}'"
  }
  if-shell -F '#{==:#{window_start_flag},0}' {
    # If the current window is not the first window in the session, select the previous window
    previous-window
  }
}

# Ctrl + Alt + <-  -- navigate through sessions / windows
bind -n C-M-right {
  if-shell -F '#{window_end_flag}' {
    # If the current window is the last window in the session, switch to the next session
    if-shell -F "#{!=:#{S:x},x}" {
      # Only switch if there is more than one session
      switch-client -n
    }
    # Select the first window in the next session
    run-shell -b -C "select-window -t '{start}'"
  }
  if-shell -F '#{==:#{window_end_flag},0}' {
    # If the current window is not the last window in the session, select the next window
    next-window
  }
}

# Alt + -> / <- / ↑ / ↓ -- navigate through panes
bind-key -n M-up select-pane -U
bind-key -n M-down select-pane -D
bind-key -n M-left select-pane -L
bind-key -n M-right select-pane -R

# New windows stay in current directory
bind-key -T prefix c new-window -c "#{pane_current_path}"
bind-key -T prefix C-c new-session -c "#{pane_current_path}"

bind -n MouseDown3Pane {
  display-menu -t= -xM -yM -T '' \
    '󰮾 Copy mode' '[' {
      copy-mode
    } '#{?#{==:#{n:buffer_created},0},-,} Paste buffer' ']' {
      paste-buffer
    } '' ' Split horizontal' h {
      split-window -h
    } ' Split vertical' v {
      split-window -v
    } '#{?#{>:#{window_panes},1},,-}#{?window_zoomed_flag, Unzoom, Zoom}' z {
      resize-pane -Z
    } '#{?#{>:#{window_panes},1},,-}󰜷 Swap Up' '}' {
      swap-pane -U
    } '#{?#{>:#{window_panes},1},,-}󰜮 Swap Down' '{' {
      swap-pane -D
    }
}
set -g mouse on
set -g set-clipboard external

bind-key -T prefix h split-window -h
bind-key -T prefix v split-window -v

# Copy the buffer to the system clipboard when running under X11 or Wayland.
# (Requires xclip for X11 and wl-clipboard for Wayland to be installed.)
set-hook -g 'pane-set-clipboard' {
  # Test if running wayland
  if-shell -F '#{!=:#{WAYLAND_DISPLAY},}' {
    run-shell -b 'tmux show-buffer | wl-copy -t text/plain'
  } {
    # Test if running X11
    if-shell -F '#{!=:#{DISPLAY},}' {
      run-shell -b 'tmux show-buffer | xclip -selection clipboard'
    }
  }
}

# if-shell -F '#{!=:#{WAYLAND_DISPLAY},}' {
#   run-shell 'wl-paste -n > /tmp/tmux-paste-buffer-#{uid}-#{client_pid}'
#   run-shell -C 'load-buffer /tmp/tmux-paste-buffer-#{uid}-#{client_pid}'
#   run-shell -b 'rm /tmp/tmux-paste-buffer-#{uid}-#{client_pid}'
# }
# if-shell -F '#{!=:#{WAYLAND_DISPLAY},}' {
#   delete-buffer
# }

#bind > { display-menu -xP -yP -T '#[align=centre]#{pane_index} (#{pane_id})'  '#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Top,}' '<' {send -X history-top} '#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Bottom,}' '>' {send -X history-bottom} '' '#{?mouse_word,Search For #[underscore]#{=/9/...:mouse_word},}' 'C-r' {if -F '#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}' 'copy-mode -t='; send -Xt= search-backward "#{q:mouse_word}"} '#{?mouse_word,Type #[underscore]#{=/9/...:mouse_word},}' 'C-y' {copy-mode -q; send-keys -l -- "#{q:mouse_word}"} '#{?mouse_word,Copy #[underscore]#{=/9/...:mouse_word},}' 'c' {copy-mode -q; set-buffer -- "#{q:mouse_word}"} '#{?mouse_line,Copy Line,}' 'l' {copy-mode -q; set-buffer -- "#{q:mouse_line}"} '' 'Horizontal Split' 'h' {split-window -h} 'Vertical Split' 'v' {split-window -v} '' '#{?#{>:#{window_panes},1},,-}Swap Up' 'u' {swap-pane -U} '#{?#{>:#{window_panes},1},,-}Swap Down' 'd' {swap-pane -D} '#{?pane_marked_set,,-}Swap Marked' 's' {swap-pane} '' 'Kill' 'X' {kill-pane} 'Respawn' 'R' {respawn-pane -k} '#{?pane_marked,Unmark,Mark}' 'm' {select-pane -m} }
#bind -n MouseDown3Pane { if -Ft= '#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}' { select-pane -t=; send -M } { display-menu -t= -xM -yM -T '#[align=centre]#{pane_index} (#{pane_id})'  '#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Top,}' '<' {send -X history-top} '#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Bottom,}' '>' {send -X history-bottom} '' '#{?mouse_word,Search For #[underscore]#{=/9/...:mouse_word},}' 'C-r' {if -F '#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}' 'copy-mode -t='; send -Xt= search-backward "#{q:mouse_word}"} '#{?mouse_word,Type #[underscore]#{=/9/...:mouse_word},}' 'C-y' {copy-mode -q; send-keys -l -- "#{q:mouse_word}"} '#{?mouse_word,Copy #[underscore]#{=/9/...:mouse_word},}' 'c' {copy-mode -q; set-buffer -- "#{q:mouse_word}"} '#{?mouse_line,Copy Line,}' 'l' {copy-mode -q; set-buffer -- "#{q:mouse_line}"} '' 'Horizontal Split' 'h' {split-window -h} 'Vertical Split' 'v' {split-window -v} '' '#{?#{>:#{window_panes},1},,-}Swap Up' 'u' {swap-pane -U} '#{?#{>:#{window_panes},1},,-}Swap Down' 'd' {swap-pane -D} '#{?pane_marked_set,,-}Swap Marked' 's' {swap-pane} '' 'Kill' 'X' {kill-pane} 'Respawn' 'R' {respawn-pane -k} '#{?pane_marked,Unmark,Mark}' 'm' {select-pane -m} '#{?#{>:#{window_panes},1},,-}#{?window_zoomed_flag,Unzoom,Zoom}' 'z' {resize-pane -Z} } }
#bind -n M-MouseDown3Pane { display-menu -t= -xM -yM -T '#[align=centre]#{pane_index} (#{pane_id})'  '#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Top,}' '<' {send -X history-top} '#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Bottom,}' '>' {send -X history-bottom} '' '#{?mouse_word,Search For #[underscore]#{=/9/...:mouse_word},}' 'C-r' {if -F '#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}' 'copy-mode -t='; send -Xt= search-backward "#{q:mouse_word}"} '#{?mouse_word,Type #[underscore]#{=/9/...:mouse_word},}' 'C-y' {copy-mode -q; send-keys -l -- "#{q:mouse_word}"} '#{?mouse_word,Copy #[underscore]#{=/9/...:mouse_word},}' 'c' {copy-mode -q; set-buffer -- "#{q:mouse_word}"} '#{?mouse_line,Copy Line,}' 'l' {copy-mode -q; set-buffer -- "#{q:mouse_line}"} '' 'Horizontal Split' 'h' {split-window -h} 'Vertical Split' 'v' {split-window -v} '' '#{?#{>:#{window_panes},1},,-}Swap Up' 'u' {swap-pane -U} '#{?#{>:#{window_panes},1},,-}Swap Down' 'd' {swap-pane -D} '#{?pane_marked_set,,-}Swap Marked' 's' {swap-pane} '' 'Kill' 'X' {kill-pane} 'Respawn' 'R' {respawn-pane -k} '#{?pane_marked,Unmark,Mark}' 'm' {select-pane -m} '#{?#{>:#{window_panes},1},,-}#{?window_zoomed_flag,Unzoom,Zoom}' 'z' {resize-pane -Z} }

bind-key    -T copy-mode    Home                 send-keys -X history-top
bind-key    -T copy-mode    End                  send-keys -X history-bottom
