# Use TERM=tmux-256color
set -g default-terminal "tmux-256color"
set -g focus-events on

# Detect root session
set -g '@tmux-running-as-root' 0
if-shell 'test `id -u` -eq 0' {
  set -g '@tmux-running-as-root' 1
}

# Detect SSH session
set -g '@tmux-running-under-ssh' 0
%if '#{!=:#{n:#{SSH_CONNECTION}},0}'
set -g '@tmux-running-under-ssh' 1
%endif

# Pane border and pane title
set -g pane-border-lines single
set -g pane-border-format 'î‚¶#[reverse] #{pane_index} â”‚ #{pane_title} #[noreverse]î‚´'
set -g pane-border-style 'fg=brightblack'
set-hook -g @update-pane-border-status {
  run-shell -b -C 'setw pane-border-status #{?#{==:#{window_panes},1},off,top}'
}
set-hook -ga after-split-window 'set-hook -R @update-pane-border-status'
set-hook -ga pane-focus-in 'set-hook -R @update-pane-border-status'

# Windows and panes start from 0
set -g base-index 0
setw -g pane-base-index 0

bind C-c new-session # Ctrl + c -- create new session
setw -g automatic-rename off # Disable automatic window renaming
set -g renumber-windows on # Enable automatic window numbering

# STATUS BAR
set -g status on
set -g status-position bottom

# Normal user uses cyan colors, root uses red colors
set -g @status-workdir-style 'bold,fg=brightwhite,bg=color23'
set -g @status-command-style 'bold,fg=brightwhite,bg=darkcyan'
set -g pane-active-border-style 'fg=green'
if-shell -F '#{E:@tmux-running-as-root}' {
  set -g @status-workdir-style 'bold,fg=brightwhite,bg=color52'
  set -g @status-command-style 'bold,fg=brightwhite,bg=darkred'
  set -g pane-active-border-style 'fg=red'
}
set -g @status-sessions-style '#{@status-workdir-style}'
set -g status-style '#{@status-command-style}'
set -g @status-right '#[none,fg=black,bg=yellow] #{USER}@#h #[#{E:@status-sessions-style}]'
set -ag @status-right '#[reverse] #{client_session}/#{window_index}/#{pane_index} #[noreverse]'

set -g @status-main '#[#{@status-workdir-style}] #{s|^#{HOME}\b|~|:pane_current_path} '
set -ga @status-main '#[#{@status-command-style}] #{pane_title}'

set -g @status-readonly '#{?client_readonly, readonly ,}'
set -g @status-sessions '#[#{E:@status-sessions-style}]#[push-default]'
set -ag @status-sessions '#{S:#{?#{==:#S,#{client_session}},#[reverse],} #S '
set -ag @status-sessions '#{?#{==:#{session_windows},1},,'
set -ag @status-sessions '#{W:#{?#{&&:#{window_active},#{==:#S,#{client_session}}},#[underscore],#[nounderscore]}#{window_index}#[nounderscore]} }'
set -ag @status-sessions '#[noreverse]}#[pop-default]'
set -g @status-datetime '#[none,fg=black,bg=color252] %a %Y-%m-%d %H#[blink]:#[noblink]%M '
set -g status-format[0] '#{E:@status-right}#[default]#{E:@status-main} #[align=right]#{E:@status-readonly}#{E:@status-sessions}#{E:@status-datetime}'
set -g status-interval 10

# Window title
set -g set-titles on
set -g set-titles-string ''
%if '#{@tmux-running-under-ssh}'
set -ga set-titles-string 'ðŸŒŽ'
%endif
%if '#{@tmux-running-as-root}'
set -ga set-titles-string 'ðŸ”“'
%endif
%if '#{@tmux-running-under-ssh}'
set -ga set-titles-string ' [#h]'
%endif
%if '#{||:@tmux-running-under-ssh,@tmux-running-as-root}'
set -ga set-titles-string ' '
%endif
set -ga set-titles-string '#{s|^#{HOME}\b|~|:pane_current_path} â€¢ #{pane_title}'

# Select session by number
bind-key -r -T prefix 0 switch-client -t 0
bind-key -r -T prefix 1 switch-client -t 1
bind-key -r -T prefix 2 switch-client -t 2
bind-key -r -T prefix 3 switch-client -t 3
bind-key -r -T prefix 4 switch-client -t 4
bind-key -r -T prefix 5 switch-client -t 5
bind-key -r -T prefix 6 switch-client -t 6
bind-key -r -T prefix 7 switch-client -t 7
bind-key -r -T prefix 8 switch-client -t 8
bind-key -r -T prefix 9 switch-client -t 9
bind -r C-h previous-window           # select previous window
bind -r C-l next-window               # select next window

# Ctrl + Alt + ->  -- navigate through sessions / windows
bind -n C-M-left {
  if-shell -F '#{window_start_flag}' {
    # If the current window is the first window in the session, switch to the previous session
    if-shell -F "#{!=:#{S:x},x}" {
      # Only switch if there is more than one session
      switch-client -p
    }
    # Select the last window in the previous session
    run-shell -b -C "select-window -t '{end}'"
  }
  if-shell -F '#{==:#{window_start_flag},0}' {
    # If the current window is not the first window in the session, select the previous window
    previous-window
  }
}

# Ctrl + Alt + <-  -- navigate through sessions / windows
bind -n C-M-right {
  if-shell -F '#{window_end_flag}' {
    # If the current window is the last window in the session, switch to the next session
    if-shell -F "#{!=:#{S:x},x}" {
      # Only switch if there is more than one session
      switch-client -n
    }
    # Select the first window in the next session
    run-shell -b -C "select-window -t '{start}'"
  }
  if-shell -F '#{==:#{window_end_flag},0}' {
    # If the current window is not the last window in the session, select the next window
    next-window
  }
}

# Alt + -> / <- / â†‘ / â†“ -- navigate through panes
bind-key -n M-up select-pane -U
bind-key -n M-down select-pane -D
bind-key -n M-left select-pane -L
bind-key -n M-right select-pane -R
